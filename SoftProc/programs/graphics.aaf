; Circle drawer


; ===[ Constants ]===

$screenWidth  = 28  ; Actually 56, but this is already converted into square pixels
$screenHeight = 28

$pixelFill0 = 32
$pixelFill1 = 176 ;46
$pixelFill2 = 177 ;61
$pixelFill3 = 178 ;35
$pixelFill4 = 219 ;36

$mem_drawBuf = 0     ; 1568 (screenWidth * screenHeight * 2)
$mem_rndSeed = 2000  ; 4

; ===================

;
; ENTRYPOINT main() -> void
;   regs: rz (i)
;
$main:
	;push dwl:2
	in dwl:
	pop  dwl:[$mem_rndSeed]
	
	cldb dwl:$mem_drawBuf
	
	push dwl:0
	pop dwl:rz
	
	$main_for_circle:
		call dwl:$random
		push dwl:$screenWidth
		mod dwl:
		i2d
		
		call dwl:$random
		push dwl:$screenHeight
		mod dwl:
		i2d
		
		call dwl:$random
		push dwl:7
		mod dwl:
		push dwl:2
		add dwl:
		i2d
		
		push df:0.44
		
		call dwl:$drawCircle
		
		push dwl:rz
		push dwl:1
		add dwl:
		dup
		pop dwl:rz
		
		push dwl:5
		cl dwl:
		jt dwl:$main_for_circle
	
	draw dwl:$mem_drawBuf
	
	end
	
	;push dwl:$screenHeight
	;i2d
	;push df:2
	;div df:
	;push df:0.5
	;sub df:
	;dup
	
	;push df:14.5
	;push df:14.5
	;push df:13.4
	;push df:0.45
	
	;push dwl:0
	;pop dwl:rx
	
	;push dwl:0
	;pop dwl:ry
	
	push df:3
	push df:5
	push df:2
	push df:0.5
	
	call dwl:$drawCircle
	
	push df:17
	push df:24
	push df:9
	push df:0.47
	
	call dwl:$drawCircle
	
	push df:17
	push df:24
	push df:9
	push df:0.47
	
	call dwl:$drawCircle
	
	push df:29
	push df:-1
	push df:15
	push df:0.47
	
	call dwl:$drawCircle
	
	push df:17
	push df:1
	push df:7
	push df:0.47
	
	call dwl:$drawCircle
	
	draw dwl:$mem_drawBuf

	end



;
; drawCircle(df:centerX, df:centerY, df:radius, df:borderWidth) -> void
;   Draws a circle with a given radius, center and etc.
;   regs: ra(x), rb(y), rc(centerX), rd(centerY), re(radius), rf(borderWidth)
;
$drawCircle:
	pop df:rf
	pop df:re
	pop df:rd
	pop df:rc

	push df:0
	pop df:ra

	$drawCircle_for_x:
		push df:0
		pop df:rb

		$drawCircle_for_y:
			push df:ra
			push df:rc
			sub df:
			sqr df:

			push df:rb
			push df:rd
			sub df:
			sqr df:

			add df:     ; (x-cX)**2+(y-cY)**2
			
			sqrt df:
			push df:re
			sub df:

			dup

			call dwl:$fabs

			push df:rf
			cle df:
			jt dwl:$drawCircle_drawBorder

			push df:0
			cle df:
			jt dwl:$drawCircle_drawInside
			
			jmp dwl:$drawCircle_nodraw

			$drawCircle_drawBorder:
				popv
				push dwl:$pixelFill3
				jmp dwl:$drawCircle_draw

			$drawCircle_drawInside:
				push dwl:$pixelFill1
				;jmp dwl:$drawCircle_draw

			$drawCircle_draw:
			push df:ra
			push df:rb
			rot dwl:-3
			
			call dwl:$drawPixel
			
			$drawCircle_nodraw:

			push df:rb
			push df:1
			add df:
			dup
			pop df:rb
			
			push dwl:$screenHeight
			i2d
			cl df:
			jt dwl:$drawCircle_for_y

		push df:ra
		push df:1
		add df:
		dup
		pop df:ra

		push dwl:$screenWidth
		i2d
		cl df:
		jt dwl:$drawCircle_for_x
	
	ret



; 
; drawPixel(df:x, df:y, bl:pixel) -> void
;   Draws a square pixel in the given coordinates
;   regs: rg (pixel), rh (addr)
; 
$drawPixel:
	rot dwl:3             ; pixel, x, y
	
	;dup
	;out df:
	;rot dwl:2
	;dup
	;out df:
	;rot dwl:2
	
	push dwl:$screenWidth
	i2d
	mul df:               ; pixel, x, sW*y
	add df:               ; pixel, sW*y+x
	push df:2             
	mul df:               ; pixel, 2*(sW*y+x)
	dup                   ; pixel, 2*(sW*y+x), 2*(sW*y+x)
	push df:1             
	add df:               ; pixel, 2*(sW*y+x), 2*(sW*y+x)+1

	rot dwl:-3            ; 2*(sW*y+x), 2*(sW*y+x), pixel
	pop bl:rg             ; 2*(sW*y+x), 2*(sW*y+x)

	d2i
	pop dwl:rh
	push bl:rg
	pop bl:[rh+$mem_drawBuf]

	d2i
	pop dwl:rh
	push bl:rg
	pop bl:[rh+$mem_drawBuf]

	ret



;
; fabs(df:x) -> df
;   Computes the |x|
;   regs: -
;
$fabs:
	dup
	push df:0
	cl df:
	jf dwl:$fabs_ret

	push df:-1
	mul df:

	$fabs_ret:
	ret


;
; random() -> dwl
;   Computes a pseudo-random number in [0, 1 << 32)
;   regs: -
;
$random:
	push dwl:[$mem_rndSeed]
	push dwl:214013
	mul dwl:
	push dwl:2531011
	add dwl:
	dup
	pop dwl:[$mem_rndSeed]
	
	ret
