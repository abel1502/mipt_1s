0x00 : nop  ()

0x01 : push (df,qw,dwl,wl,bl:read)
0x02 : pop  (df,qw,dwl,wl,bl:write)
0x03 : popv ()
0x04 : dup  ()
0x05 : rot  (dwl:read)

0x08 : add  (df:stack)
0x09 : sub  (df:stack)
0x0A : mul  (df:stack)
0x0B : div  (df:stack)
0x0C : sqr  (df:stack)
0x0D : sqrt (df:stack)
0x0E : dec  (df:stack)
0x0F : inc  (df:stack)
0x10 : neg  (df:stack)

# Arguments provide not only destination, but also type:
# they can, essentially, say "in stack.df" -
# and that would mean "read a double and put it on the stack"
# 0x18 : in   (df:stack)
# 0x19 : out  (df:stack)
0x18 : in   (df:stack,write)
0x19 : out  (df:stack,read)

0x20 : jmp  (dwl:stack,read)
0x21 : jf   (dwl:stack,read)
0x22 : jt   (dwl:stack,read)
0x23 : call (dwl:stack,read)
0x24 : ret  ()

0x28 : cg   (df:stack)
0x29 : cge  (df:stack)
0x2A : cl   (df:stack)
0x2B : cle  (df:stack)
0x2C : ce   (df:stack)
0x2D : cne  (df:stack)


0xE0 : d2b  ()
0xE1 : b2d  ()
0xE2 : d2i  ()
0xE3 : i2d  ()

0xF0 : end  ()
0xF1 : dump ()
0xF2 : jm   (dwl:read)
0xF3 : draw (dwl:stack,read)  # The argument is the memory address at which the buffer is located
0xF4 : cldb (dwl:stack,read)  # -"-
